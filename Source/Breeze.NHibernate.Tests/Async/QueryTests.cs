//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Breeze.Core;
using Breeze.NHibernate.Metadata;
using Breeze.NHibernate.Tests.Models;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using NHibernate;
using Xunit;

namespace Breeze.NHibernate.Tests
{
    public partial class QueryTests : BaseDatabaseTest
    {


        [Fact]
        public async Task TestWhereSyntheticPropertyAsync()
        {
            await (TestAsync(
                session => session.Query<OrderProduct>(),
                () => new QueryString
                {
                    Where = new Dictionary<string, Predicate> {{"OrderId", new Predicate {Equal = 1}}}
                },
                (session, queryResult) =>
                {
                    Assert.Equal(session.Query<OrderProduct>().Where(o => o.Order.Id == 1).ToList(), queryResult.Results);
                }));
        }

        [Fact]
        public async Task TestOrderBySyntheticPropertyAsync()
        {
            await (TestAsync(
                session => session.Query<OrderProduct>(),
                () => new QueryString {OrderBy = new List<string> {"OrderId desc"}},
                (session, queryResult) =>
                {
                    Assert.Equal(session.Query<OrderProduct>().OrderByDescending(o => o.Order.Id).ToList(), queryResult.Results);
                }));
        }

        [Fact]
        public async Task TestSelectSyntheticPropertyAsync()
        {
            await (TestAsync(
                session => session.Query<OrderProduct>(),
                () => new QueryString {Select = new List<string> {"OrderId"}},
                (session, queryResult) =>
                {
                    dynamic results = queryResult.Results;
                    var expected = session.Query<OrderProduct>().Select(o => new { OrderId = o.Order.Id }).ToList();
                    for (var i = 0; i < expected.Count; i++)
                    {
                        Assert.Equal(expected[i].OrderId, results[i].OrderId);
                    }
                }));
        }

        [Fact]
        public async Task TestExpandManyToOneAsync()
        {
            await (TestAsync(
                session => session.Query<OrderProduct>(),
                () => new QueryString {Expand = new List<string> {"Order"}},
                (session, queryResult) =>
                {
                    foreach (OrderProduct orderProduct in queryResult.Results)
                    {
                        Assert.False(NHibernateUtil.IsInitialized(orderProduct.Product));
                        Assert.True(NHibernateUtil.IsInitialized(orderProduct.Order));
                    }
                }));
        }

        [Fact]
        public async Task TestExpandOneToManyAsync()
        {
            await (TestAsync(
                session => session.Query<Order>(),
                () => new QueryString {Expand = new List<string> {"Products"}},
                (session, queryResult) =>
                {
                    foreach (Order order in queryResult.Results)
                    {
                        Assert.True(NHibernateUtil.IsInitialized(order.Products));
                        Assert.Equal(10, order.Products.Count);
                        foreach (var orderProduct in order.Products)
                        {
                            Assert.False(NHibernateUtil.IsInitialized(orderProduct.Product));
                        }

                        Assert.False(NHibernateUtil.IsInitialized(order.FkProducts));
                    }
                }));

            await (TestAsync(
                session => session.Query<CompositeOrder>(),
                () => new QueryString {Expand = new List<string> {"CompositeOrderRows"}},
                (session, queryResult) =>
                {
                    foreach (CompositeOrder order in queryResult.Results)
                    {
                        Assert.True(NHibernateUtil.IsInitialized(order.CompositeOrderRows));
                        Assert.Equal(10, order.CompositeOrderRows.Count);
                        foreach (var row in order.CompositeOrderRows)
                        {
                            Assert.False(NHibernateUtil.IsInitialized(row.Product));
                        }
                    }
                }));
        }

        [Fact]
        public async Task TestNestedExpandAsync()
        {
            await (TestAsync(
                session => session.Query<Order>(),
                () => new QueryString {Expand = new List<string> {"Products.Product"}},
                (session, queryResult) =>
                {
                    foreach (Order order in queryResult.Results)
                    {
                        Assert.True(NHibernateUtil.IsInitialized(order.Products));
                        Assert.Equal(10, order.Products.Count);
                        foreach (var orderProduct in order.Products)
                        {
                            Assert.True(NHibernateUtil.IsInitialized(orderProduct.Product));
                        }

                        Assert.False(NHibernateUtil.IsInitialized(order.FkProducts));
                    }
                }));

            await (TestAsync(
                session => session.Query<CompositeOrder>(),
                () => new QueryString {Expand = new List<string> {"CompositeOrderRows.Product"}},
                (session, queryResult) =>
                {
                    foreach (CompositeOrder order in queryResult.Results)
                    {
                        Assert.True(NHibernateUtil.IsInitialized(order.CompositeOrderRows));
                        Assert.Equal(10, order.CompositeOrderRows.Count);
                        foreach (var row in order.CompositeOrderRows)
                        {
                            Assert.True(NHibernateUtil.IsInitialized(row.Product));
                        }
                    }
                }));
        }

        [Fact]
        public async Task TestExpandOneToManyWithTakeAsync()
        {
            await (TestAsync(
                session => session.Query<Order>(),
                () => new QueryString {Expand = new List<string> {"Products"}, Take = 5},
                (session, queryResult) =>
                {
                    var orders = (List<Order>)queryResult.Results;
                    Assert.Equal(5, orders.Count);
                    foreach (Order order in orders)
                    {
                        Assert.True(NHibernateUtil.IsInitialized(order.Products));
                        Assert.Equal(10, order.Products.Count);
                        Assert.False(NHibernateUtil.IsInitialized(order.FkProducts));
                    }
                }));

            await (TestAsync(
                session => session.Query<CompositeOrder>(),
                () => new QueryString {Expand = new List<string> {"CompositeOrderRows"}, Take = 5},
                (session, queryResult) =>
                {
                    var orders = (List<CompositeOrder>)queryResult.Results;
                    Assert.Equal(5, orders.Count);
                    foreach (CompositeOrder order in orders)
                    {
                        Assert.True(NHibernateUtil.IsInitialized(order.CompositeOrderRows));
                        Assert.Equal(10, order.CompositeOrderRows.Count);
                    }
                }));
        }
    }
}
