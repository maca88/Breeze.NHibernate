using System;
using System.Collections.Generic;
using System.Linq;
using Breeze.NHibernate.Metadata;

namespace Breeze.NHibernate
{
    /// <summary>
    /// Represents a client model metadata.
    /// </summary>
    public class ClientModelMetadata : ModelMetadata
    {
        /// <summary>
        /// Constructs an instance of <see cref="ClientModelMetadata"/>.
        /// </summary>
        public ClientModelMetadata(
            Type type,
            Type baseType,
            AutoGeneratedKeyType autoGeneratedKeyType,
            IReadOnlyList<ClientModelProperty> properties,
            IReadOnlyDictionary<string, SyntheticForeignKeyProperty> syntheticForeignKeyProperties,
            IReadOnlyCollection<Type> derivedTypes,
            IReadOnlyCollection<string> derivedPropertyNames,
            IReadOnlyList<string> identifierPropertyNames,
            IReadOnlyList<Func<object, object>> identifierPropertyGetters,
            IReadOnlyList<Type> identifierPropertyTypes,
            IReadOnlyList<DataType> identifierPropertyDataTypes,
            IReadOnlyList<int?> identifierPropertyTypeLengths,
            IReadOnlyCollection<string> foreignKeyPropertyNames,
            IReadOnlyDictionary<string, Association> associations)
            : base(
                type,
                baseType,
                autoGeneratedKeyType,
                false,
                syntheticForeignKeyProperties,
                derivedTypes,
                derivedPropertyNames,
                identifierPropertyNames,
                identifierPropertyGetters,
                identifierPropertyTypes,
                identifierPropertyDataTypes,
                identifierPropertyTypeLengths,
                foreignKeyPropertyNames,
                associations)
        {
            Properties = properties;
            AllProperties = new HashSet<string>(identifierPropertyNames
                .Concat(properties.Select(o => o.Name))
                .Concat(syntheticForeignKeyProperties.Select(o => o.Key)));
        }

        /// <summary>
        /// A list of model properties.
        /// </summary>
        public IReadOnlyList<ClientModelProperty> Properties { get; }

        /// <summary>
        /// A collection of all property names of the model.
        /// </summary>
        public override IReadOnlyCollection<string> AllProperties { get; }
    }
}
