using Breeze.NHibernate.Extensions;
using Breeze.NHibernate.Internal;
using Breeze.NHibernate.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;

namespace Breeze.NHibernate
{
    /// <inheritdoc />
    public class SaveWorkStateFactory : ISaveWorkStateFactory
    {
        private readonly INHibernateClassMetadataProvider _classMetadataProvider;
        private readonly IEntityMetadataProvider _entityMetadataProvider;
        private readonly JsonSerializer _jsonSerializer;

        public SaveWorkStateFactory(
            IEntityMetadataProvider entityMetadataProvider,
            IJsonSerializerSettingsProvider jsonSerializerSettingsProvider,
            INHibernateClassMetadataProvider classMetadataProvider)
        {
            _entityMetadataProvider = entityMetadataProvider;
            _classMetadataProvider = classMetadataProvider;
            _jsonSerializer = JsonSerializer.Create(jsonSerializerSettingsProvider.GetForSave());
        }

        /// <inheritdoc />
        public SaveWorkState Create(SaveBundle saveBundle, Predicate<EntityInfo> includePredicate)
        {
            var entitiesMetadata = new Dictionary<string, EntityMetadata>();
            var saveMap = new Dictionary<Type, List<EntityInfo>>();
            foreach (dynamic entityData in saveBundle.Entities)
            {
                var entityAspect = (EntityAspect)_jsonSerializer.Deserialize(new JTokenReader(entityData.entityAspect), typeof(EntityAspect));
                if (!entitiesMetadata.TryGetValue(entityAspect.EntityTypeName, out var metadata))
                {
                    metadata = GetMetadata(entityAspect.EntityTypeName);
                    entitiesMetadata.Add(entityAspect.EntityTypeName, metadata);
                }

                if (!saveMap.TryGetValue(metadata.Type, out var entityInfos))
                {
                    entityInfos = new List<EntityInfo>();
                    saveMap.Add(metadata.Type, entityInfos);
                }

                var entityInfo = CreateEntityInfo(entityData, entityAspect, metadata);
                if (includePredicate(entityInfo))
                {
                    entityInfos.Add(entityInfo);
                }
            }

            return new SaveWorkState(saveMap);
        }

        private EntityMetadata GetMetadata(string entityTypeName)
        {
            var entityName = BreezeHelper.GetEntityName(entityTypeName);
            var metadata = _classMetadataProvider.Get(entityName);
            if (metadata == null)
            {
                throw new InvalidOperationException($"Unknown entity name: {entityName}");
            }

            return _entityMetadataProvider.GetMetadata(metadata.MappedClass);
        }

        private EntityInfo CreateEntityInfo(dynamic entityData, EntityAspect entityAspect, EntityMetadata metadata)
        {
            return new EntityInfo(metadata, _jsonSerializer.Deserialize(new JTokenReader(entityData), metadata.Type))
            {
                AutoGeneratedKey = entityAspect.AutoGeneratedKey,
                EntityState = entityAspect.EntityState,
                OriginalValuesMap = entityAspect.OriginalValuesMap.ToDictionary(),
                UnmappedValuesMap = ((JObject)entityData.__unmapped).ToDictionary()
            };
        }
    }
}
