using System;
using System.Linq.Expressions;
using Breeze.NHibernate.Metadata;
using Breeze.NHibernate.Serialization;
using NHibernate;
using NHibernate.Cfg;

namespace Breeze.NHibernate.Configuration
{
    /// <summary>
    /// A fluent configurator used to configure the <see cref="ModelConfiguration"/>.
    /// </summary>
    public interface IModelConfigurator
    {
        /// <summary>
        /// Set the resource name that will be used when building <see cref="BreezeMetadata"/>.
        /// </summary>
        /// <param name="resourceName">The resource name of the model.</param>
        IModelConfigurator ResourceName(string resourceName);

        /// <summary>
        /// Set whether a <see cref="ISession.Refresh(object)"/> should be called after saving the model into the database. Default <see langword="false" />.
        /// </summary>
        IModelConfigurator RefreshAfterSave(bool value);

        /// <summary>
        /// Set whether a <see cref="ISession.Refresh(object)"/> should be called after updating the model in the database. Default <see langword="false" />.
        /// </summary>
        IModelConfigurator RefreshAfterUpdate(bool value);

        /// <summary>
        /// Set the batch size for fetching existing entities. Default NHibernate <see cref="Settings.DefaultBatchFetchSize"/>.
        /// </summary>
        IModelConfigurator BatchFetchSize(int value);

        /// <summary>
        /// Set the <see cref="AutoGeneratedKeyType"/> that will be used when building <see cref="BreezeMetadata"/>. Default <see cref="ModelMetadata.AutoGeneratedKeyType"/>.
        /// </summary>
        IModelConfigurator AutoGeneratedKeyType(AutoGeneratedKeyType value);

        /// <summary>
        /// Set the custom data that will be used when building <see cref="BreezeMetadata"/>.
        /// </summary>
        IModelConfigurator Custom(object value);

        /// <summary>
        /// Configures the member by name.
        /// </summary>
        /// <param name="memberName">The member name.</param>
        /// <param name="action">The configuration action.</param>
        IModelConfigurator ForMember(string memberName, Action<IMemberConfigurator> action);

        /// <summary>
        /// Configures a synthetic member.
        /// </summary>
        /// <typeparam name="TMember">The member type.</typeparam>
        /// <param name="memberName">The member name.</param>
        /// <param name="action">The configuration action.</param>
        IModelConfigurator ForSyntheticMember<TMember>(string memberName, Action<ISyntheticMemberConfigurator> action);

        /// <summary>
        /// Adds a synthetic member that will be included in the <see cref="BreezeMetadata"/> and when serializing using <see cref="BreezeContractResolver"/>.
        /// </summary>
        /// <typeparam name="TMember">The member type.</typeparam>
        /// <param name="memberName">The member name.</param>
        /// <param name="serializeFunction">The member serialization function.</param>
        /// <param name="action">The configuration action.</param>
        IModelConfigurator AddSyntheticMember<TMember>(
            string memberName,
            SerializeSyntheticMemberDelegate serializeFunction,
            Action<ISyntheticMemberConfigurator> action);
    }

    /// <summary>
    /// A fluent configurator used to configure <see cref="ModelConfiguration"/>.
    /// </summary>
    public interface IModelConfigurator<TModel>
    {
        /// <summary>
        /// Set the resource name that will be used when building <see cref="BreezeMetadata"/>.
        /// </summary>
        /// <param name="resourceName">The resource name of the model.</param>
        IModelConfigurator<TModel> ResourceName(string resourceName);

        /// <summary>
        /// Set whether a <see cref="ISession.Refresh(object)"/> should be called after saving the model into the database. Default <see langword="false" />.
        /// </summary>
        IModelConfigurator<TModel> RefreshAfterSave(bool value);

        /// <summary>
        /// Set whether a <see cref="ISession.Refresh(object)"/> should be called after updating the model in the database. Default <see langword="false" />.
        /// </summary>
        IModelConfigurator<TModel> RefreshAfterUpdate(bool value);

        /// <summary>
        /// Set the batch size for fetching existing entities. Default NHibernate <see cref="Settings.DefaultBatchFetchSize"/>.
        /// </summary>
        IModelConfigurator<TModel> BatchFetchSize(int value);

        /// <summary>
        /// Set the <see cref="AutoGeneratedKeyType"/> that will be used when building <see cref="BreezeMetadata"/>. Default <see cref="ModelMetadata.AutoGeneratedKeyType"/>.
        /// </summary>
        IModelConfigurator<TModel> AutoGeneratedKeyType(AutoGeneratedKeyType value);

        /// <summary>
        /// Set the custom data that will be used when building <see cref="BreezeMetadata"/>.
        /// </summary>
        IModelConfigurator<TModel> Custom(object value);

        /// <summary>
        /// Configures a member.
        /// </summary>
        /// <typeparam name="TMember">The member type.</typeparam>
        /// <param name="memberExpression">The member expression.</param>
        /// <param name="action">The configuration action.</param>
        IModelConfigurator<TModel> ForMember<TMember>(Expression<Func<TModel, TMember>> memberExpression,
            Action<IMemberConfigurator<TModel, TMember>> action);

        /// <summary>
        /// Configures a synthetic member.
        /// </summary>
        /// <typeparam name="TMember">The member type.</typeparam>
        /// <param name="memberName">The member name.</param>
        /// <param name="action">The configuration action.</param>
        IModelConfigurator<TModel> ForSyntheticMember<TMember>(string memberName, Action<ISyntheticMemberConfigurator<TModel, TMember>> action);

        /// <summary>
        /// Adds a synthetic member that will be included in the <see cref="BreezeMetadata"/> and when serializing using <see cref="BreezeContractResolver"/>.
        /// </summary>
        /// <typeparam name="TMember">The member type.</typeparam>
        /// <param name="memberName">The member name.</param>
        /// <param name="serializeFunction">The member serialization function.</param>
        /// <param name="action">The configuration action.</param>
        IModelConfigurator<TModel> AddSyntheticMember<TMember>(
            string memberName,
            Func<TModel, TMember> serializeFunction,
            Action<ISyntheticMemberConfigurator<TModel, TMember>> action = null);
    }
}
