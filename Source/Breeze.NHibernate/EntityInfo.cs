using System;
using System.Collections.Generic;
using Breeze.NHibernate.Internal;

namespace Breeze.NHibernate
{
    /// <summary>
    /// Contains entity information that were send from the client.
    /// </summary>
    public class EntityInfo
    {
        /// <summary>
        /// Constructs an instance of <see cref="EntityInfo"/>.
        /// </summary>
        public EntityInfo(EntityMetadata entityMetadata, object clientEntity)
        {
            EntityMetadata = entityMetadata ?? throw new ArgumentNullException(nameof(entityMetadata));
            ClientEntity = clientEntity ?? throw new ArgumentNullException(nameof(clientEntity));
        }

        /// <summary>
        /// The entity metadata.
        /// </summary>
        public EntityMetadata EntityMetadata { get; }

        /// <summary>
        /// The entity type.
        /// </summary>
        public Type EntityType => EntityMetadata.Type;

        /// <summary>
        /// The entity that was sent from the client.
        /// </summary>
        public object ClientEntity { get; }

        /// <summary>
        /// The persisted or to be persisted entity.
        /// </summary>
        public object Entity { get; internal set; }

        /// <summary>
        /// The entity state.
        /// </summary>
        public EntityState EntityState { get; set; }

        /// <summary>
        /// The original entity properties values.
        /// </summary>
        public Dictionary<string, object> OriginalValuesMap { get; set; }

        /// <summary>
        /// The auto-generated entity property.
        /// </summary>
        public AutoGeneratedKey AutoGeneratedKey { get; set; }

        /// <summary>
        /// The unmapped entity properties values.
        /// </summary>
        public Dictionary<string, object> UnmappedValuesMap { get; set; }

        /// <summary>
        /// Whether the entity info was added on the server by using <see cref="SaveChangesContext.AddAdditionalEntity"/>.
        /// </summary>
        internal bool ServerSide { get; set; }

        /// <summary>
        /// Gets the client entity identifier values.
        /// </summary>
        /// <returns>An array with identifier values.</returns>
        public object[] GetIdentifierValues()
        {
            var propertyNames = EntityMetadata.IdentifierPropertyNames;
            var values = new object[propertyNames.Count];
            for (var i = 0; i < propertyNames.Count; i++)
            {
                var propertyName = propertyNames[i];
                if (EntityMetadata.SyntheticForeignKeyProperties.TryGetValue(propertyName, out var syntheticProperty))
                {
                    values[i] = BreezeHelper.ConvertToType(UnmappedValuesMap[propertyName], syntheticProperty.IdentifierType);
                }
                else
                {
                    values[i] = EntityMetadata.IdentifierPropertyGetters[i](ClientEntity);
                }
            }

            return values;
        }
    }
}
