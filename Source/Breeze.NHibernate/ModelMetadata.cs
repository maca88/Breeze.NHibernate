using System;
using System.Collections.Generic;
using Breeze.NHibernate.Metadata;

namespace Breeze.NHibernate
{
    /// <summary>
    /// Base metadata data for client models and entities.
    /// </summary>
    public abstract class ModelMetadata
    {
        /// <summary>
        /// Constructs an instance of <see cref="ModelMetadata"/>.
        /// </summary>
        protected ModelMetadata(
            Type type,
            Type baseType,
            AutoGeneratedKeyType autoGeneratedKeyType,
            bool hasCompositeKey,
            IReadOnlyDictionary<string, SyntheticForeignKeyProperty> syntheticForeignKeyProperties,
            IReadOnlyCollection<Type> derivedTypes,
            IReadOnlyCollection<string> derivedPropertyNames,
            IReadOnlyList<string> identifierPropertyNames,
            IReadOnlyList<Func<object, object>> identifierPropertyGetters,
            IReadOnlyList<Type> identifierPropertyTypes,
            IReadOnlyList<DataType> identifierPropertyDataTypes,
            IReadOnlyList<int?> identifierPropertyTypeLengths,
            IReadOnlyCollection<string> foreignKeyPropertyNames,
            IReadOnlyDictionary<string, Association> associations)
        {
            Type = type;
            BaseType = baseType;
            AutoGeneratedKeyType = autoGeneratedKeyType;
            HasCompositeKey = hasCompositeKey;
            SyntheticForeignKeyProperties = syntheticForeignKeyProperties;
            DerivedTypes = derivedTypes;
            DerivedPropertyNames = derivedPropertyNames;
            Associations = associations;
            ForeignKeyPropertyNames = foreignKeyPropertyNames;
            IdentifierPropertyGetters = identifierPropertyGetters;
            IdentifierPropertyTypes = identifierPropertyTypes;
            IdentifierPropertyNames = identifierPropertyNames;
            IdentifierPropertyDataTypes = identifierPropertyDataTypes;
            IdentifierPropertyTypeLengths = identifierPropertyTypeLengths;
        }

        /// <summary>
        /// The model type.
        /// </summary>
        public Type Type { get; }

        /// <summary>
        /// The base type of the model.
        /// </summary>
        public Type BaseType { get; }

        /// <summary>
        /// The auto-generated key type.
        /// </summary>
        public AutoGeneratedKeyType AutoGeneratedKeyType { get; }

        /// <summary>
        /// Whether the model has a composite key.
        /// </summary>
        public bool HasCompositeKey { get; }

        /// <summary>
        /// A dictionary of synthetic foreign key properties where the key is the foreign key property name.
        /// </summary>
        public IReadOnlyDictionary<string, SyntheticForeignKeyProperty> SyntheticForeignKeyProperties { get; }

        /// <summary>
        /// A list of identifier property names.
        /// </summary>
        public IReadOnlyList<string> IdentifierPropertyNames { get; }

        /// <summary>
        /// A list of identifier property getters.
        /// </summary>
        public IReadOnlyList<Func<object,object>> IdentifierPropertyGetters { get; }

        /// <summary>
        /// A list of identifier property types.
        /// </summary>
        public IReadOnlyList<Type> IdentifierPropertyTypes { get; }

        /// <summary>
        /// A list of identifier property data types.
        /// </summary>
        public IReadOnlyList<DataType> IdentifierPropertyDataTypes { get; }

        /// <summary>
        /// A list of identifier property type lengths.
        /// </summary>
        public IReadOnlyList<int?> IdentifierPropertyTypeLengths { get; }

        /// <summary>
        /// A collection of base types.
        /// </summary>
        public IReadOnlyCollection<Type> DerivedTypes { get; }

        /// <summary>
        /// A collection of base types property names.
        /// </summary>
        public IReadOnlyCollection<string> DerivedPropertyNames { get; }

        /// <summary>
        /// A collection of foreign key property names.
        /// </summary>
        public IReadOnlyCollection<string> ForeignKeyPropertyNames { get; }

        /// <summary>
        /// A dictionary of association by its property names.
        /// </summary>
        public IReadOnlyDictionary<string, Association> Associations { get; }

        /// <summary>
        /// A collection of all property names.
        /// </summary>
        public abstract IReadOnlyCollection<string> AllProperties { get; }
    }
}
